# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class GeneOntologyDecorator(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def getTermRelationTypes(self, context=None):
        """
        :returns: instance of list of type "term_relation_type"
        """
        return self._client.call_method(
            'GeneOntologyDecorator.getTermRelationTypes',
            [], self._service_ver, context)

    def getTopTermCategories(self, context=None):
        """
        :returns: instance of list of type "TermCategory" -> structure:
           parameter "category_name" of String, parameter "position_from" of
           Double, parameter "position_to" of Double
        """
        return self._client.call_method(
            'GeneOntologyDecorator.getTopTermCategories',
            [], self._service_ver, context)

    def getTermRelations(self, params, context=None):
        """
        :param params: instance of type "GetTermRelationsParams" ->
           structure: parameter "feature_guid" of String
        :returns: instance of mapping from type "term_relation_type" to type
           "TermProfile" -> structure: parameter "best_term" of type "Term"
           -> structure: parameter "term_guid" of String, parameter
           "term_name" of String, parameter "term_position" of Double,
           parameter "pvalue" of Double, parameter "terms" of list of type
           "Term" -> structure: parameter "term_guid" of String, parameter
           "term_name" of String, parameter "term_position" of Double,
           parameter "pvalue" of Double
        """
        return self._client.call_method(
            'GeneOntologyDecorator.getTermRelations',
            [params], self._service_ver, context)

    def listFeatures(self, params, context=None):
        """
        :param params: instance of type "ListFeaturesParams" -> structure:
           parameter "genome_ref" of String, parameter "genome_guid" of String
        :returns: instance of list of type "FeatureOntologyPrediction" ->
           structure: parameter "feature_guid" of String, parameter
           "feature_name" of String, parameter "distance" of Double,
           parameter "reference_term_name" of String, parameter
           "reference_term_guid" of String, parameter "kbase_term_name" of
           String, parameter "kbase_term_guid" of String
        """
        return self._client.call_method(
            'GeneOntologyDecorator.listFeatures',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('GeneOntologyDecorator.status',
                                        [], self._service_ver, context)
